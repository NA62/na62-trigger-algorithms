/*
 * L1Reduction.cpp

 *
 *  Created on: June 24, 2015
 *      Author: Angela Romano (angela.romano@cern.ch)
 */

#include <options/Options.h>
#include "L1Reduction.h"

namespace na62 {


std::vector<std::string> L1Reduction::algorithmTitles_;
std::atomic<int>* L1Reduction::eventCountersByAlgoID_;
std::vector<uint> L1Reduction::reductionFactors_;

void L1Reduction::initialize() {
	for (auto& algoTitle : algorithmTitles_) {
		reductionFactors_.push_back(Options::GetInt((char*) algoTitle.c_str()));
	}
	eventCountersByAlgoID_ = new std::atomic<int>(reductionFactors_.size());
}

uint L1Reduction::getNumberOfRegisteredAlgorithms(){
	return algorithmTitles_.size();
}
uint L1Reduction::registerAlgorithm(std::string algorithmTitle) {
	// Check if the algo has already been registered
	if (std::find(algorithmTitles_.begin(), algorithmTitles_.end(),
			algorithmTitle) != algorithmTitles_.end()) {
		std::cerr << "Tried to register algorithm '" << algorithmTitle
				<< "' twice!" << std::endl;
		exit(1);
	}

	algorithmTitle = "algoreduction_" + algorithmTitle;
	Options::addOption(algorithmTitle, 1,
			"Autogenerated option for a reduction factor of a specific L1 algorithm");

	algorithmTitles_.push_back(algorithmTitle);
	return algorithmTitles_.size() - 1;
}

} /* namespace na62 */
